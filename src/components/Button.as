package components{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.filters.DropShadowFilter;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;		public class Button extends Sprite	{		public static const DISABLED:String = "DISABLED";		public static const UP:String = "UP";		public static const OVER:String = "OVER";		public static const DOWN:String = "DOWN";		///////////////////////////////////////////////////////////////////////		protected var currentState:String;		private var _isSelected:Boolean = false;		///////////////////////////////////////////////////////////////////////		protected var _myCallback:Function = null;		protected var _myIcon:MovieClip = null;		protected var _myText:String = "";		protected var _myWidth:Number = 1;		protected var _myHeight:Number = 1;		protected var _myID:Number = -1;		///////////////////////////////////////////////////////////////////////		protected var _aBox:Sprite = null;		protected var _textField:TextField=null;		protected var _fontScale:Number = .7;		protected var _padding:Number = 10;		protected var _alpha:Number = .4;		protected var _upColor:uint = 0xFFFFFF;		protected var _overColor:uint = 0xCCCCCC;		protected var _downColor:uint = 0x666666;		protected var _textColor:uint = 0xEAEAEA;		protected var _textFont:String = "Arial";		///////////////////////////////////////////////////////////////////////		protected var shadowFilter:DropShadowFilter;				public function Button(aWidth:Number, aHeight:Number, aText:String, anIcon:MovieClip,  aCallback:Function=null, anID:Number=-1):void 		{ 			_myID = anID;			_myCallback = aCallback;			_myWidth = aWidth;			_myHeight = aHeight;			_myText = aText;			_myIcon = anIcon;			currentState = UP;			shadowFilter = new DropShadowFilter(3, 90, 0x000000, .6, 8, 8, 1, 2, true);			//_myIcon.filters = [shadowFilter];			addListeners();			drawButton();		}		////////////////////////////////////////////////////////////////////////////////////////////////////		public function doMouseover(event:MouseEvent=null):void  		{  			if (_isSelected) {				currentState = DOWN;			}else {				currentState = OVER;				drawButton();			}		}  		public function doMouseout(event:MouseEvent=null):void  		{  			if (_isSelected) {				currentState = DOWN;			}else {				currentState = UP;				drawButton();			}		}		private function doClick(event:MouseEvent=null):void  		{  						currentState = DOWN;			drawButton();			doCallback();		} 		protected function doCallback():void		{			if (_myCallback != null)			{				if (_myID != -1)				{					_myCallback(_myID);				}else 				{					_myCallback();				}			}		}		////////////////////////////////////////////////////////////////////////////////////////////////////		private function addListeners():void		{			addEventListener(MouseEvent.ROLL_OVER, doMouseover);			addEventListener(MouseEvent.ROLL_OUT, doMouseout);			addEventListener(MouseEvent.CLICK, doClick);		}		private function removeListeners():void		{			removeEventListener(MouseEvent.ROLL_OVER, doMouseover);			removeEventListener(MouseEvent.ROLL_OUT, doMouseout);			removeEventListener(MouseEvent.CLICK, doClick);		}		private function drawButton():void 		{ 			erase();			_aBox = new Sprite();			addChild(_aBox);			var textFormat:TextFormat = new TextFormat();			switch (currentState)			{				case UP:					_aBox.graphics.beginFill(_upColor, _alpha);					textFormat.color = _overColor;					break;				case OVER:					_aBox.graphics.beginFill(_overColor, _alpha);					textFormat.color = _upColor;					break;					case DOWN:					_aBox.graphics.beginFill(_downColor, _alpha);					textFormat.color = _upColor;					break;				}					_aBox.graphics.drawRect(0,0, _myWidth, _myHeight);			_aBox.graphics.endFill();			textFormat.size = _aBox.height*_fontScale;			textFormat.font = _textFont;			textFormat.align = TextFormatAlign.LEFT;				_textField = new TextField();			_textField.height = _aBox.height;			_textField.width = _aBox.width;			_textField.mouseEnabled = false;			_textField.defaultTextFormat = textFormat;			_textField.multiline = true;			_textField.text = _myText;			addChild(_textField);							if (_myIcon != null)			{				addChild(_myIcon);				_myIcon.height = _myHeight*.8;				_myIcon.scaleX = _myIcon.scaleY;				_textField.x = _myIcon.width + _padding;				_textField.width = _aBox.width-_myIcon.width-_padding;			}			//_aBox.filters = [shadowFilter];		}		private function erase():void		{			if (_aBox != null)			{				removeChild(_aBox);				_aBox = null;			}			if (_textField != null)			{				removeChild(_textField);				_textField = null;			}		}		public function destroyView():void		{			removeListeners();			erase();		}				public function get isSelected():Boolean 		{			return _isSelected;		}				public function set isSelected(value:Boolean):void 		{			_isSelected = value;		}	}}